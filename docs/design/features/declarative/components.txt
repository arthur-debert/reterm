Components
==========

reterm's declarative UI system is built around components, which are the
building blocks of your terminal user interface. Components can be defined
entirely in YAML, making it easy to create complex UIs without writing a lot of
code.

Component Hierarchy
-----------------

Components are organized in a hierarchical structure that mirrors the actual
component tree in the application:

    app:
      components:
        - type: Window
          id: main_window
          title: "Main Window"
          min_size: [80, 24]
          children:
            - type: VBox
              id: main_layout
              children:
                - type: NavBar
                  id: top_nav
                  items:
                    - label: "File"
                      id: file_menu
                    - label: "Edit"
                      id: edit_menu
                    - label: "Help"
                      id: help_menu
                
                - type: HBox
                  id: content_area
                  expand: true
                  expand_weight: 3
                  children:
                    - type: FileTree
                      id: file_browser
                      expand: true
                      expand_weight: 1
                      path: "/home/user/documents"
                    
                    - type: Editor
                      id: main_editor
                      expand: true
                      expand_weight: 3
                      file: null
                
                - type: StatusBar
                  id: status_bar
                  text: "Ready"

This hierarchical structure allows for complex UIs to be built from simple
components, with each component responsible for a specific part of the
interface.

Component Definition
------------------

Each component definition includes:

1. type: The component class name
2. id: Unique identifier for the component
3. children: Child components (for container types)
4. Various component-specific properties

Example of a simple component:

    - type: Button
      id: save_button
      label: "Save"
      on_press: "save_document"

Component Types
-------------

reterm provides a rich set of built-in component types:

1. Container Components
---------------------

Containers hold and manage other components:

- Window: Top-level container with borders and title
- Dialog: Modal container for focused interactions
- Panel: Simple container with optional border
- VBox: Vertical arrangement of components
- HBox: Horizontal arrangement of components
- Grid: Grid-based layout
- Tabs: Tabbed container
- ScrollView: Scrollable container
- Form: Container for form elements

Example of a container component:

    - type: VBox
      id: form_container
      children:
        - type: Label
          id: form_title
          text: "User Information"
        
        - type: TextInput
          id: name_input
          label: "Name"
        
        - type: TextInput
          id: email_input
          label: "Email"
        
        - type: HBox
          id: button_row
          children:
            - type: Button
              id: submit_button
              label: "Submit"
            
            - type: Button
              id: cancel_button
              label: "Cancel"

2. Input Components
-----------------

Components that accept user input:

- Button: Clickable button
- TextInput: Single-line text input
- TextArea: Multi-line text input
- Checkbox: Boolean input
- RadioButton: Exclusive selection from a group
- Select: Dropdown selection
- Slider: Numeric input with visual slider
- DatePicker: Date selection
- ColorPicker: Color selection

Example of input components:

    - type: Form
      id: user_form
      children:
        - type: TextInput
          id: username
          label: "Username"
          placeholder: "Enter username"
          max_length: 20
        
        - type: PasswordInput
          id: password
          label: "Password"
          placeholder: "Enter password"
          mask_char: "*"
        
        - type: Checkbox
          id: remember_me
          label: "Remember me"
          checked: false

3. Display Components
------------------

Components that display information:

- Label: Simple text display
- Text: Multi-line text display
- Image: ASCII/ANSI art image
- ProgressBar: Visual indicator of progress
- Spinner: Animated loading indicator
- Table: Tabular data display
- Tree: Hierarchical data display
- Chart: Data visualization

Example of display components:

    - type: VBox
      id: dashboard
      children:
        - type: Label
          id: dashboard_title
          text: "System Status"
          style:
            bold: true
        
        - type: ProgressBar
          id: cpu_usage
          label: "CPU Usage"
          value: 45
          max: 100
        
        - type: ProgressBar
          id: memory_usage
          label: "Memory Usage"
          value: 60
          max: 100
        
        - type: Table
          id: process_table
          columns:
            - name: "PID"
              width: 6
            - name: "Name"
              width: 20
            - name: "CPU %"
              width: 8
            - name: "Memory %"
              width: 10
          rows:
            - [1234, "chrome", 12.5, 8.3]
            - [5678, "terminal", 2.1, 1.5]
            - [9012, "vscode", 8.7, 5.2]

4. Navigation Components
---------------------

Components for navigation and structure:

- NavBar: Horizontal navigation bar
- Menu: Dropdown or popup menu
- Breadcrumbs: Path-based navigation
- Pagination: Page navigation
- Sidebar: Side navigation panel
- Accordion: Collapsible sections

Example of navigation components:

    - type: VBox
      id: app_layout
      children:
        - type: NavBar
          id: main_nav
          items:
            - label: "Dashboard"
              id: nav_dashboard
            - label: "Users"
              id: nav_users
            - label: "Settings"
              id: nav_settings
        
        - type: HBox
          id: content_area
          children:
            - type: Sidebar
              id: side_nav
              width: 20
              items:
                - label: "Overview"
                  id: side_overview
                - label: "Statistics"
                  id: side_stats
                - label: "Reports"
                  id: side_reports
            
            - type: Panel
              id: main_content
              expand: true

Component Properties
------------------

Components can have various properties depending on their type:

1. Common Properties (available to all components):
   - id: Unique identifier
   - min_size: Minimum size [width, height]
   - max_size: Maximum size [width, height]
   - expand: Whether the component should expand to fill available space
   - expand_weight: Relative weight for expansion
   - visible: Whether the component is visible
   - enabled: Whether the component is enabled
   - style: Component-specific style overrides
   - on_event: Event handlers

2. Type-Specific Properties:
   - Window: title, border_style
   - Button: label, on_press
   - TextInput: value, placeholder, max_length
   - List: items, selection_mode, on_select
   - Table: columns, rows, sortable

Example of component with type-specific properties:

    - type: Button
      id: save_button
      label: "Save"
      min_size: [10, 1]
      max_size: [20, 1]
      on_press: save_document
      style:
        focused: "reverse"
        disabled: "dim"

Dynamic Properties
---------------

Component properties can reference application state or other dynamic values:

    - type: Label
      id: welcome_label
      text: "Welcome, @state.user_name!"
      visible: "@state.is_logged_in"

    - type: ProgressBar
      id: task_progress
      label: "Task Progress"
      value: "@state.completed_tasks"
      max: "@state.total_tasks"

This allows components to automatically update when the referenced state
changes.

Layout Management
---------------

reterm provides several ways to control component layout:

1. Size Constraints:
   - min_size: Minimum size [width, height]
   - max_size: Maximum size [width, height]
   - fixed_size: Exact size [width, height]

2. Expansion:
   - expand: Whether the component should expand to fill available space
   - expand_weight: Relative weight for expansion (higher values get more space)

3. Alignment:
   - h_align: Horizontal alignment ("left", "center", "right")
   - v_align: Vertical alignment ("top", "middle", "bottom")

4. Margins and Padding:
   - margin: Space around the component [top, right, bottom, left]
   - padding: Space inside the component [top, right, bottom, left]

Example of layout properties:

    - type: HBox
      id: button_row
      children:
        - type: Button
          id: cancel_button
          label: "Cancel"
          expand: true
          expand_weight: 1
          h_align: "left"
        
        - type: Button
          id: save_button
          label: "Save"
          expand: true
          expand_weight: 1
          h_align: "right"

Container-Specific Layout
-----------------------

Different container types have their own layout properties:

1. VBox/HBox:
   - spacing: Space between children
   - align: Alignment of children ("start", "center", "end", "stretch")

2. Grid:
   - columns: Number of columns
   - rows: Number of rows
   - column_spacing: Space between columns
   - row_spacing: Space between rows

3. Form:
   - label_width: Width of labels
   - label_align: Alignment of labels ("left", "right")

Example of container-specific layout:

    - type: Grid
      id: dashboard_grid
      columns: 2
      rows: 2
      column_spacing: 2
      row_spacing: 1
      children:
        - type: Panel
          id: cpu_panel
          title: "CPU Usage"
          grid_column: 0
          grid_row: 0
        
        - type: Panel
          id: memory_panel
          title: "Memory Usage"
          grid_column: 1
          grid_row: 0
        
        - type: Panel
          id: disk_panel
          title: "Disk Usage"
          grid_column: 0
          grid_row: 1
        
        - type: Panel
          id: network_panel
          title: "Network Usage"
          grid_column: 1
          grid_row: 1

Focus Management
--------------

reterm automatically manages focus between components:

1. Focusable Components:
   - Most input components are focusable by default
   - Containers can be made focusable with `focusable: true`

2. Focus Navigation:
   - Tab/Shift+Tab: Move focus to the next/previous focusable component
   - Arrow keys: Navigate within containers

3. Programmatic Focus:
   - Components can be focused programmatically with actions:
     ```
     action: "focus"
     component: "username_input"
     ```

Example of focus properties:

    - type: Form
      id: login_form
      children:
        - type: TextInput
          id: username_input
          label: "Username"
          tab_index: 1  # Focus order
        
        - type: PasswordInput
          id: password_input
          label: "Password"
          tab_index: 2
        
        - type: Button
          id: login_button
          label: "Login"
          tab_index: 3
          default: true  # Gets focus by default

Component State
-------------

Components maintain their own internal state, which can be accessed and
modified:

1. Value State:
   - TextInput: Current text value
   - Checkbox: Checked state
   - Select: Selected option

2. UI State:
   - Focused: Whether the component has focus
   - Hovered: Whether the cursor is over the component
   - Pressed: Whether the component is being pressed

3. Custom State:
   - Components can define their own state properties
   - State can be accessed and modified through actions

Example of component state:

    - type: TextInput
      id: search_input
      value: "@state.search_query"
      on_change:
        action: "set_state"
        state: "search_query"
        value: "@event.data.value"

Templates and Reusable Components
-------------------------------

For complex applications, you can define reusable component templates:

    app:
      # Component templates
      templates:
        form_field:
          type: VBox
          children:
            - type: Label
              id: "${id}_label"
              text: "${label}"
            - type: TextInput
              id: "${id}_input"
              value: "${value}"
              on_change: "${on_change}"
      
      # Using templates
      components:
        - type: Form
          id: user_form
          children:
            - template: form_field
              id: username
              label: "Username"
              value: ""
              on_change: "validate_username"
            
            - template: form_field
              id: email
              label: "Email"
              value: ""
              on_change: "validate_email"

Templates support variable substitution using `${variable}` syntax, making it
easy to create consistent, reusable UI patterns.

Dynamic Component Creation
------------------------

Components can be created dynamically based on data:

    - type: List
      id: todo_list
      items: "@state.todo_items"
      item_template:
        type: HBox
        children:
          - type: Checkbox
            id: "checkbox_${item.id}"
            checked: "${item.completed}"
            on_change:
              action: "call_function"
              function: "toggle_todo"
              args:
                id: "${item.id}"
          
          - type: Label
            id: "label_${item.id}"
            text: "${item.text}"
            style:
              strikethrough: "${item.completed}"

This creates a list of todo items, with each item rendered according to the
template and populated with data from the state.

Custom Components
---------------

You can define custom component types by extending existing ones:

    # In your Python code
    from reterm.components import Component, TextInput
    
    class EmailInput(TextInput):
        def __init__(self, **props):
            super().__init__(**props)
            self.validator = self.validate_email
        
        def validate_email(self, value):
            if "@" not in value:
                return "Invalid email address"
            return None
    
    # Register the custom component
    app.register_component("EmailInput", EmailInput)

Then use it in your YAML configuration:

    - type: EmailInput
      id: email_input
      label: "Email"
      placeholder: "Enter your email"

Accessibility
-----------

reterm provides several features to make your UI accessible:

1. Keyboard Navigation:
   - All interactive elements can be accessed via keyboard
   - Tab order can be customized with `tab_index`

2. Screen Reader Support:
   - Components can have `aria_label` and `aria_description` properties
   - Role information is automatically provided

3. High Contrast:
   - Support for high-contrast themes
   - Focus indicators are clear and visible

Example of accessibility properties:

    - type: Button
      id: submit_button
      label: "Submit"
      aria_label: "Submit form"
      aria_description: "Submit the form and process the data"

Best Practices
------------

1. Component Organization:
   - Keep component hierarchies shallow when possible
   - Group related components together
   - Use consistent naming conventions for IDs

2. Component Design:
   - Each component should have a single responsibility
   - Use composition over complex individual components
   - Prefer built-in components over custom ones when possible

3. Layout:
   - Use appropriate container types for your layout needs
   - Be mindful of terminal size constraints
   - Test your UI at different terminal sizes

4. Performance:
   - Limit the number of components for better performance
   - Use lazy rendering for large collections
   - Be careful with deep component nesting

Example: Complete Form
-------------------

Here's a comprehensive example of a form with various components:

    - type: Form
      id: user_registration_form
      title: "User Registration"
      children:
        - type: TextInput
          id: username_input
          label: "Username"
          placeholder: "Enter username"
          min_length: 3
          max_length: 20
          required: true
          on_change: "validate_username"
        
        - type: TextInput
          id: email_input
          label: "Email"
          placeholder: "Enter email"
          required: true
          on_change: "validate_email"
        
        - type: PasswordInput
          id: password_input
          label: "Password"
          placeholder: "Enter password"
          min_length: 8
          required: true
          on_change: "validate_password"
        
        - type: PasswordInput
          id: confirm_password_input
          label: "Confirm Password"
          placeholder: "Confirm password"
          required: true
          on_change: "validate_passwords_match"
        
        - type: Select
          id: country_select
          label: "Country"
          options:
            - value: "us"
              label: "United States"
            - value: "ca"
              label: "Canada"
            - value: "mx"
              label: "Mexico"
            - value: "other"
              label: "Other"
          on_change: "update_country"
        
        - type: HBox
          id: name_fields
          children:
            - type: TextInput
              id: first_name_input
              label: "First Name"
              placeholder: "First name"
              required: true
            
            - type: TextInput
              id: last_name_input
              label: "Last Name"
              placeholder: "Last name"
              required: true
        
        - type: Checkbox
          id: terms_checkbox
          label: "I agree to the Terms of Service"
          required: true
          on_change: "update_submit_button"
        
        - type: HBox
          id: button_row
          children:
            - type: Button
              id: cancel_button
              label: "Cancel"
              on_press: "cancel_registration"
            
            - type: Button
              id: submit_button
              label: "Submit"
              enabled: "@state.form_valid"
              on_press: "submit_registration"

Conclusion
---------

reterm's component system provides a powerful way to build terminal user
interfaces using a declarative approach. By defining components in YAML, you can
create complex UIs with minimal code, while still having the flexibility to
extend and customize when needed.

The hierarchical component structure, combined with layout management, event
handling, and state binding, allows for sophisticated applications that are both
maintainable and user-friendly.