name: Publish to PyPI

on:
  # Simple workflow dispatch without inputs
  workflow_dispatch:

permissions:
  contents: write

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          # Fetch all history for proper versioning
          fetch-depth: 0
          # Use PAT for better permissions
          token: ${{ secrets.PAT }}

      - name: Setup Python environment
        uses: ./.github/actions/setup-python-poetry # Reference your composite action
        with:
          python-version: "3.11" # Specify the Python version you want to use
          cache-key-prefix: "test-env"

      - name: Determine version
        id: determine_version
        shell: bash
        run: |
          release_version=$(poetry version -s)
          echo "Using version from pyproject.toml: $release_version"
          echo "release_version=$release_version" >> $GITHUB_OUTPUT

      # Build step remains the same
      - name: Build
        shell: bash
        run: |
          poetry build

      # Publish step remains the same
      - name: Publish
        shell: bash
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          echo "Publishing version ${{ steps.determine_version.outputs.release_version }} to PyPI..."
          poetry run twine upload --repository pypi dist/*

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          tag_name: v${{ steps.determine_version.outputs.release_version }}
          token: ${{ secrets.GITHUB_TOKEN }}
          generate_release_notes: true
          prerelease: false
          name:
            "Release v${{ steps.determine_version.outputs.release_version }}"

      # Only trigger if UPDATES_HOMEBREW repository variable is set
      - name: Trigger Homebrew Formula Update
        if: ${{ vars.UPDATES_HOMEBREW == 'true' }}
        uses: peter-evans/repository-dispatch@v2
        with:
          # Using the PAT secret for repository dispatch
          token: ${{ secrets.PAT }}
          event-type: pypi-published
          client-payload: >-
            {
              "version": "${{ steps.determine_version.outputs.release_version
            }}",
              "branch": "${{ github.ref_name }}"
            }
          repository: ${{ github.repository }}
